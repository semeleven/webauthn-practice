<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PetsGramm - Profile</title>
    <link href="/style.css" rel="stylesheet" />
  </head>
  <body>
    <div class="bg-white max-w-screen-lg mx-auto pt-10">
      <% if (later) { %>
      <button type="button" class="w-full btn btn-secondary mb-5 js-verify">
        Resign in
      </button>
      <% } else { %>
      <div>
        <h3 class="text-lg font-medium leading-6 text-gray-900 mt-8">Keys</h3>
        <ul
          class="border border-gray-200 rounded-md divide-y divide-gray-200 my-3"
        >
          <% user.devices.forEach(function(device){ %>
          <li class="pl-3 pr-4 py-3 flex items-center justify-between text-sm">
            <div class="w-0 flex-1 flex items-center">
              <span class="ml-2 flex-1 w-0 truncate"><%= device.name %></span>
            </div>
            <div class="w-0 flex-1 flex items-center">
              <span class="ml-2 flex-1 w-0 truncate"
                >Counter: <%= device.counter %></span
              >
            </div>
          </li>
          <% }); %>
        </ul>
        <a href="/add-key" class="w-full btn btn-primary mb-5">Add new</a>
        <a href="/later" class="w-full btn btn-primary mb-5">To the future</a>
        <button
          type="button"
          class="w-full btn btn-secondary mb-5 js-very-secure-action"
        >
          Some very secure action
        </button>

        <form action="/logout" method="POST">
          <button class="w-full btn btn-secondary">Log Out</button>
        </form>
      </div>
      <% }%>
    </div>
    <script type="module">
      import { xios } from "./api.js";
      import {
        convertGetOptions,
        convertGetCredential,
      } from "./webauthn-helpers.js";

      document
        .querySelector(".js-verify")
        ?.addEventListener("click", async () => {
          const { options } = await xios("/key/challenge");

          let credential;

          try {
            credential = await navigator.credentials.get({
              publicKey: convertGetOptions(options),
            });
          } catch (e) {
            alert("navigator.credentials.get error: " + e.message);
            return;
          }

          const { success, error } = await xios(
            "/key/verify",
            convertGetCredential(credential)
          );

          if (success) {
            location.reload();
          } else {
            alert(error || "Not valid token");
          }
        });

      document
        .querySelector(".js-very-secure-action")
        ?.addEventListener("click", async () => {
          const { options } = await xios("/key/challenge");

          let credential;

          try {
            credential = await navigator.credentials.get({
              publicKey: convertGetOptions(options),
            });
          } catch (e) {
            alert("navigator.credentials.get error: " + e.message);
            return;
          }

          const { success, error } = await xios(
            "/key/verify",
            convertGetCredential(credential)
          );

          if (success) {
            alert("DONE!");
          } else {
            alert(error || "Not valid token");
          }
        });
    </script>
  </body>
</html>
