<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PetsGramm - Sing in - Second step</title>
    <link href="/style.css" rel="stylesheet" />
  </head>
  <body>
    <div
      class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8"
    >
      <div class="max-w-md w-full">
        <div>
          <div class="text-center">
            <a href="/" class="text-2xl" style="font-family: 'Comic Sans MS'">
              PetsGramm
            </a>
          </div>
          <h2
            class="mt-6 text-center text-3xl leading-9 font-extrabold text-gray-900"
          >
            Sing in - Second step
          </h2>
        </div>
        <div class="mt-6">
          <button type="submit" class="w-full btn btn-primary">Verify</button>
        </div>
      </div>
    </div>
    <script type="module">
      import { xios } from "./api.js";
      import {
        convertGetOptions,
        convertGetCredential,
      } from "./webauthn-helpers.js";

      document.querySelector("button").addEventListener("click", async () => {
        /*
        {
          "challenge": ArrayBuffer,
          "allowCredentials": [
            {
              "id": ArrayBuffer,
              "type": "public-key"
            }
          ],
          "timeout": 60000,
          "userVerification": "discouraged" | "preferred" | "required"
        }
        */
        const { options } = await xios("/key/challenge");

        let credential;

        try {
          /*
          {
            id: String
            rawId: ArrayBuffer
            response: {
              authenticatorData: ArrayBuffer
              clientDataJSON: ArrayBuffer
              signature: ArrayBuffer or empty string
              userHandle: ArrayBuffer or null
              type: "public-key"
            }
          }
          */
          credential = await navigator.credentials.get({
            publicKey: convertGetOptions(options),
          });
        } catch (e) {
          alert("navigator.credentials.get error: " + e.message);
          return;
        }

        const { success, error } = await xios(
          "/key/verify",
          convertGetCredential(credential)
        );

        if (success) {
          location.href = "/";
        } else {
          alert(error || "Not valid token");
        }
      });
    </script>
  </body>
</html>
